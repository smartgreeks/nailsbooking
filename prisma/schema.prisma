// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String   @unique
  email     String?
  notes     String?
  preferences String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // in minutes
  price       Float
  isactive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointmentServices AppointmentService[]
  employeeServices EmployeeService[]
}

model Employee {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  specialties String?  // JSON string of service IDs they can perform
  isActive    Boolean  @default(true)
  workingHours String? // JSON string for working schedule
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  appointments Appointment[]
  employeeServices EmployeeService[]
}

model EmployeeService {
  id         String @id @default(cuid())
  employeeId String
  serviceId  String
  createdAt  DateTime @default(now())

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([employeeId, serviceId])
}

model Appointment {
  id           String      @id @default(cuid())
  customerId   String
  employeeId   String?
  date         DateTime
  status       AppointmentStatus @default(SCHEDULED)
  notes        String?
  totalDuration Int        // in minutes
  totalPrice   Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  customer     Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  employee     Employee?   @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  services     AppointmentService[]
}

model AppointmentService {
  id           String @id @default(cuid())
  appointmentId String
  serviceId    String
  createdAt    DateTime @default(now())

  appointment  Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service      Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, serviceId])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}
